cmdhistory=["(bit-and 000 001)" "(bit-or 000 001)" "(bit-shift-right 001)" "doc bit-shift-right" "(bit-shift-right 000 001)" "(bit-shift-right 1110 1)" "(bit-test 0010 2)" "(bit-test 0010 1)" "2r0" "2r1" "2r01" "2r010" "2r1010" "2r00011110" "(bit-shift-right 2r00011110 1)" "(bit-shift-right 2r00011110 2)" "(bit-shift-right 2r00011110 3)" "(bit-shift-right 2r00011110 4)" "(bit-shift-right 2r00011110 5)" "(bit-shift-right 2r00011110 6)" "(2r11110)" "2r11110" "(bit-shift-right 2r00011110 0)" "(bit-and 0000000000000001000000000000000 7)" "(bit-and 2r0000000000000001000000000000000 7)" "(bit-and 2r0000000000000001000000000000001 7)" "(bit-and 2r0000000000000001000000000000111 7)" "(bit-and 2r0000000000000001000000000010111 7)" "(bit-and 2r0000000000000001000000000000011 7)" "(bit-test (bit-and 2r0000000000000001000000000000011 7) 30 )" "(bit-test 2r1001 0)" "(bit-test 2r1001 1)" "(bit-test 2r1001 2)" "(bit-test 2r1001 3)" "(2r30)" "(Integer/toString 19 2)" "2r(Integer/toString 19 2)" "(bit-test (Integer/toString 19 2) 6)" "(Integer/toBinary 19 2)" "(Integer/toBinaryString 19 2)" "(bit-test 30 7)" "(bit-test 30 6)" "(bit-test 1 1)" "(bit-test 2r11110 6)" "(bit-test 7 1)" "(bit-test 30 4)" "(bit-shift-right 30)" "(bit-set 2r011 2)" "(bit-set 2r001 2)" "(bit-set 1 2)" "(bit-or 32768 1)" "(concat '(1 1 0) 1)" "(concat 1 '(1 2 3))" "(conj 1 '(1 2 3))" "(conj '(1 2 3) 1)" "(conj '(1 2 3) \\" \\")" "(conj '() 1)" "(conj () 1)" "(conj (conj () 1) 2)" "(println '(1 2 3) )" "(prn 1)" "(pr 1)" "(doseq [x [32768]] (bit-test (x inc 1)))" "(doseq [x 32768] (bit-test x 1))" "(doseq [x 10r32768] (bit-test x 1))" "(doseq [x [2r32768]] (bit-test x 1))" "(doseq [x [10r32768]] (bit-test x 1))" "(10r32768)" "10r32768" "(bit-test 32768 16)" "(bit-test 32768 15)" "(bit-test 32768 14)" "(doseq [a \:- (U nil 7) [1 nil 2 3]\\r\\n        \:when a]\\r\\n   (inc a))" "(doseq [a \:- 7 [1 nil 2 3]\\r\\n        \:when a]\\r\\n   (inc a))" "(doseq [row (1 2 3 4)] (prn (+ 1 row)))" "(doseq [row '(1 2 3 4)] (prn (+ 1 row)))" "(doseq [row [1 2 3 4]] (prn (+ 1 row)))" "(doseq [row 2r00101011] (prn (+ 1 row)))" "(bit-test 2r1010111 1)" "(bit-and 2r1010110 7)" "(bit-test 30 (bit-and 2r101 7))" "(calculate-next-row 30 32768)" "43" "(inc 3)" "(take 31 (calculate-next-row 30 32768))" "(take 2 '(1 2 3 4 ))" "(pr 1)" "(pr \\"\\")" "(print 4) (print 5)" "(print \\"foo\\") (print \\"foo\\")" "(print \\" \\")" "(concat \\"1\\" \\"0 1\\")" "(inc -1)" "(inc 0)" "(println)" "(display-row 2r30)" "(display-row 30)" "(display-row '(1 0 1 0))" "(format \\"%\#x\\" (bit-and 2r1100 2r0100))" "(bit-and 2r1100 2r0100)" "0r10" "10r10" "2r11" "(doseq (x range 31) prn x)" "(doseq [x (range 31)] prn x )" "(doseq [x [\:a \:b], y (range 5) \:when (odd? y)] (prn x y))" "(doseq [x (range 10)] (prn x))" "(doseq [x (range 31)] (prn x))" "(doseq [bit-pointer (range 31)] (if (bit-test (30 bit-pointer)) (print 1) (print \\" \\") ))" "(bit-test 30 1)" "(display-row)" "( display-row 30)" "(display-row 10)" "(display-row 31)" "(display-row 30)" "(bit-test 30 31)" "(bit-test 30 0)" "(bit-test 30 1)" "(display-row 30)" " (display-row 30)" "(display-row 30)" " (display-row 30)" "(print \\" 1 2 3 4\\")" "(print \\" \\")" "(print \\"_\\")" "(print \\" 1 2 3 4\\")" "(range 31 0)" "(take 31 (range 31 0)\\n      )" "(take 1 (range 31 0))" "(take 1 (range 31))" "(take 1 (range 31 0 1))" "(take 1 (range 31 1 1))" "(take 1 (range 31 1 -1))" "(range 31 1 -1)" "(range 31 0 -1)" "(range 31 -1 -1)" "(display-row 30)" "(display-row 32768)" "(bit-test 30 (bit-and 2r001 7))" "(bit-test 30 (bit-and 2r010 7))" "(bit-test 30 (bit-and 2r111 7))" "(calculate-next-row 30 32768)" "(take 5 (iterate inc 5))" "(take 5 (inc 5))" "(generate-cell-automata 5)" "(calculate-next-row 30 32768)" "(bit-test 30 (bit-and 32768 7)\\n          )" "(calculate-next-row 30 32768)" "(bit-shift-right 30 1)" "(bit-set 0 0)" " (bit-set 2r0 0)" "(calculate-next-row 30 32768)" "(bit-shift-right 30 1) (2r0) (inc 0)" "(bit-shift-right 30 1) 2r0 (inc 0)" "(calculate-next-row 30 32768)" "(bit-set 0 0)" "2r0" "(inc 0)" "(bit-shift-right 32768 1)" "(generate-cell-automata 30)" "(calculate-next-row 30 32768)" "(calculate-next-row 30 32768)\\r\\n4" "(calculate-next-row 30 32768)" "(generate-cell-automata 5)" "(generate-cell-automata 30)" "(take 5 (iterate (fn [[a b]] [b (+ a b)]) [0 1]))" "(generate-cell-automata 30)" "(calculate-next-row 30 32768)" "(generate-cell-automata 30)" "(generate-cell-automata)" "(generate-cell-automata 30)" "(display-row 56937)" "(display-row 51292)" "(display-row 57344)" "(display-row 51200)" "(display-row 56832)" "(display-row 51328)" "(generate-cell-automata 30)" "(generate-cell-automata 60)" "(generate-cell-automata 220)" "(generate-cell-automata 60)" "(calculate-next-row 8191)" "(calculate-next-row 31)" "(calculate-next-row 32768)" "(/ 32.0 3)" "(bit-shift-left 24576)" "(bit-shift-left 24576 1)" "(calculate-next-row 57344)" "(calculate-next-row 61440)" "(generate-cell-automata 16)" "(generate-cell-automata 17)" "(generate-cell-automata 16)" "(generate-cell-automata 222)" "(take 5 (iterate \#(inc %) 5))" "(take 5 (iterate \#(inc (* %1 %2)) 5 6))" "(take 5 (iterate \#(inc (* %1 %2)) [5 6]))" "(take 5 (iterate \#(inc (* %0 %1)) [5 6]))" "(take 5 (iterate \#(inc (* 2 %)) 5))" "(generate-cell-automata 30)" "(generate-cell-automata)" "(generate-cell-automata 30)" "(generate-cell-automata 220)" "(generate-cell-automata 222)" "(range 31 0 -1)" "(range 32 0 -1)" "(generate-cell-automata 30)" "(range 32 -1 -1)" "(range 31 -1 -1)" "(generate-cell-automata 30)" "(generate-cell-automata 90)" "(generate-cell-automata 30)" "(generate-cell-automata 220)" "(generate-cell-automata 222)" "(generate-cell-automata 30)" "(generate-cell-automata 90)" "(generate-cell-automata 220)" "(generate-cell-automata 222)" "(generate-cell-automata 215)" "(generate-cell-automata 32)" "(generate-cell-automata 126)" "(generate-cell-automata 255)" "(generate-cell-automata 250)" "(generate-cell-automata 21)" "(generate-cell-automata 120)" "(generate-cell-automata 222)" "(generate-cell-automata 122)"]
eclipse.preferences.version=1
